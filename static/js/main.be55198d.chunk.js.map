{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["letters","split","App","className","map","letter","id","indexOf","src","process","type","placeholder","onKeyDown","e","keyCode","repeat","sound","document","getElementById","paused","play","currentTime","href","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+NAGMA,G,KAAU,6BAA6BC,MAAM,KAgFpCC,MA9Ef,WAoBE,OACE,yBAAKC,UAAU,YAEZH,EAAQI,KAAI,SAACC,GAAD,OACX,2BAAOC,GAAIN,EAAQO,QAAQF,GAAU,IACnC,4BACEG,IAAKC,0BAAA,yBAA2CJ,EAA3C,QACLK,KAAK,eAHT,uDAQF,2BAAOJ,GAAI,IACT,4BACEE,IAAKC,kDACLC,KAAK,eAHT,oDAOA,2BAAOJ,GAAI,GACT,4BACEE,IAAKC,sDACLC,KAAK,eAHT,oDAOA,2BAAOJ,GAAI,IACT,4BACEE,IAAKC,kDACLC,KAAK,eAHT,oDAOA,2BACE,wBAAIP,UAAU,SAAd,2CAEF,2BACE,wBAAIA,UAAU,SAAd,+CAEF,2BACE,2BACEO,KAAK,OACLC,YAAY,oBACZL,GAAG,aACHM,UA/DW,SAACC,GAClB,IACGA,EAAEC,SAAW,IAAMD,EAAEC,SAAW,IACnB,IAAdD,EAAEC,SACY,KAAdD,EAAEC,SACY,KAAdD,EAAEC,WAEGD,EAAEE,OAAQ,CAEb,IAAIC,EAAQC,SAASC,eAAeL,EAAEC,SAClCE,EAAMG,OACRH,EAAMI,OAENJ,EAAMK,YAAc,OAqDxB,uBAAGlB,UAAU,UAAb,cACc,IACZ,uBAAGmB,KAAK,8CAA8CC,OAAO,UAA7D,cAEK,IAJP,gBC5DcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASC,eAAe,SDyHpB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.be55198d.chunk.js","sourcesContent":["import React from 'react';\r\n// import soundPlayer from './components/jsEventListener';\r\n\r\nconst letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\r\n\r\nfunction App() {\r\n  let soundHandler = (e) => {\r\n    if (\r\n      (e.keyCode >= 65 && e.keyCode <= 90) ||\r\n      e.keyCode === 8 ||\r\n      e.keyCode === 32 ||\r\n      e.keyCode === 13\r\n    ) {\r\n      if (!e.repeat) {\r\n        // Checks to see if key is being held down\r\n        let sound = document.getElementById(e.keyCode);\r\n        if (sound.paused) {\r\n          sound.play();\r\n        } else {\r\n          sound.currentTime = 0;\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-app\">\r\n      {/* <audioSources /> */}\r\n      {letters.map((letter) => (\r\n        <audio id={letters.indexOf(letter) + 65}>\r\n          <source\r\n            src={process.env.PUBLIC_URL + `/NKCreamSounds/${letter}.mp3`}\r\n            type=\"audio/mpeg\"\r\n          ></source>\r\n          Your browser does not support the audio element.\r\n        </audio>\r\n      ))}\r\n      <audio id={32}>\r\n        <source\r\n          src={process.env.PUBLIC_URL + `/NKCreamSounds/SPACE.mp3`}\r\n          type=\"audio/mpeg\"\r\n        ></source>\r\n        Your browser does not support the audio element.\r\n      </audio>\r\n      <audio id={8}>\r\n        <source\r\n          src={process.env.PUBLIC_URL + `/NKCreamSounds/BACKSPACE.mp3`}\r\n          type=\"audio/mpeg\"\r\n        ></source>\r\n        Your browser does not support the audio element.\r\n      </audio>\r\n      <audio id={13}>\r\n        <source\r\n          src={process.env.PUBLIC_URL + `/NKCreamSounds/ENTER.mp3`}\r\n          type=\"audio/mpeg\"\r\n        ></source>\r\n        Your browser does not support the audio element.\r\n      </audio>\r\n      <p>\r\n        <h1 className=\"start\">Start Typing To Hear Your New Keyboard</h1>\r\n      </p>\r\n      <p>\r\n        <h4 className=\"noise\">Noise-Canceling Headphones are Recommended</h4>\r\n      </p>\r\n      <p>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Start Typing Here\"\r\n          id=\"main-input\"\r\n          onKeyDown={soundHandler}\r\n        ></input>\r\n      </p>\r\n      <p className=\"footer\">\r\n        Inspired by{' '}\r\n        <a href=\"https://www.youtube.com/watch?v=P_9vXJZVT54\" target=\"_blank\">\r\n          this video\r\n        </a>{' '}\r\n        by Glarses\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}